services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_DB: mpio
      POSTGRES_USER: mpio
      POSTGRES_PASSWORD: password
      PGDATA: /data/mpio
    volumes:
      - postgres:/data/mpio
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  data-service:
    container_name: data-service
    build:
      context: data-service
      dockerfile: Dockerfile
    image: data-service:latest
    ports:
      - "8083:8083"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mpio
      - SPRING_DATASOURCE_USERNAME=mpio
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
    networks:
      - postgres
  authentication:
    container_name: authentication
    build:
      context: authentication
      dockerfile: Dockerfile
    image: authentication:latest
    ports:
      - "8080:8080"
    restart: unless-stopped
  webapp:
    container_name: webapp
    build:
      context: webapp
      dockerfile: Dockerfile
    image: webapp
    ports:
      - "8081:8081"
    restart: unless-stopped
  image-analyzer:
    container_name: image-analyzer
    build:
      context: image-analyzer
      dockerfile: Dockerfile
    image: image-analyzer:latest
    ports:
      - "8082:8082"
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
  pgadmin:
